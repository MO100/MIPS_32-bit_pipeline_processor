

module ALU_tb;

  // Inputs
  reg [31:0] data1_in, data2_in;
  reg [3:0] ALUOp_in;
  reg clk, reset;

  // Outputs
  wire [31:0] data_out;

  // Instantiate the ALU module
  ALU uut (
    .data_out(data_out),
    .data1_in(data1_in),
    .data2_in(data2_in),
    .ALUOp_in(ALUOp_in)
  );

  // Clock generation
always begin
  forever begin 
  #100 clk = ~clk;
end
end 
  // Initial values
  initial begin
    clk = 0;
    reset = 0;
    data1_in = 32'b0000_0000_0000_0000_0000_0000_0000_0000;
    data2_in = 32'b0000_0000_0000_0000_0000_0000_0000_0000;
    ALUOp_in = 4'b0000;

    // Wait a few clock cycles after reset for stability
    #100;
    
    // Test cases
    // Case 1: AND operation
    ALUOp_in = 4'b0000;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 2: OR operation
    ALUOp_in = 4'b0001;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 3: ADD operation
    ALUOp_in = 4'b0010;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 4: MFLO operation
    ALUOp_in = 4'b0011;
    #100;
    
    // Case 5: MFHI operation
    ALUOp_in = 4'b0100;
    #100;
    
    // Case 6: MULT operation
    ALUOp_in = 4'b0101;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 7: SUB operation
    ALUOp_in = 4'b0110;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #10;
    
    // Case 8: SLT operation
    ALUOp_in = 4'b0111;
    data1_in = 32'b0000_0000_0001_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 9: DIV operation
    ALUOp_in = 4'b1000;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 10: NOR operation
    ALUOp_in = 4'b1100;
    data1_in = 32'b1111_1111_1111_1111_1111_1111_1111_1111; 
    data2_in = 32'b1010_1010_1010_1010_1010_1010_1010_1010; 
    #100;
    
    // Case 11: Default operation
    ALUOp_in = 4'b1111;
    #100;

    
    // Stop simulation after some time
    #100;

  end
endmodule
